#!/usr/bin/env bash
set -e
set -u
set -o pipefail
IFS=$'\n\t'

### Recurring functions & variables

msg_info() {
    echo
    printf '\033[33m%s\033[0m\n' "$1"
}

msg_error() {
    printf '\033[91m%s\033[0m\n' "$1" >&2
}

check_is_sudo() {
    [ "$(id -u)" -eq 0 ] || { msg_error "Requires root privileges. Use sudo."; exit 1; }
}

check_is_not_sudo() {
    [ "$(id -u)" -ne 0 ] || { msg_error "Don't run this as sudo."; exit 1; }
}

confirm() {
    while true; do
        read -r -p "$1 [y/n] " choice
        case "$choice" in
            [yY]es|[yY])
                return 0
                ;;
            [nN]o|[nN])
                return 1
                ;;
            *)
                msg_error "Please enter yes or no."
                ;;
        esac
  done
}

brew_install() {
    msg_info "Installing packages..."
    brew install "${packages[@]}"
}

brew_clean() {
    msg_info "Cleaning up install files..."
    brew cleanup
}

spin() {
    sp='/-\|'
    printf ' '
    while sleep 0.1; do
        printf '\b%.1s' "$sp"
        sp=${sp#?}${sp%???}
    done
}

tmpdir=$(mktemp -d); trap 'rm -rf "$tmpdir"' EXIT

# check if running macOS
[ "$(uname)" = Darwin ] || { msg_error "You are not running macOS, exiting."; exit 1; }

setup_prefsettings() {
    check_is_not_sudo

    msg_info "Closing System Preferences to avoid conflicts..."
    osascript -e 'tell application "System Preferences" to quit'

    msg_info "Setting Finder prefs..."

    # show hidden files by default
    defaults write com.apple.finder AppleShowAllFiles -bool true

    # show all files extensions
    defaults write com.apple.finder AppleShowAllExtensions -bool true

    msg_info "Setting trackpad and keyboard..."

    # Trackpad: enable tap to click
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
    defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
    defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

    # Keyboard: fast keyboard repeat rate
    defaults write NSGlobalDomain KeyRepeat -int 2
    defaults write NSGlobalDomain InitialKeyRepeat -int 15

    msg_info "Setting Dock prefs..."
    defaults write com.apple.dock orientation left
    defaults write com.apple.dock tilesize -integer 40
    defaults write com.apple.dock mineffect -string "scale"
    defaults write com.apple.dock persistent-apps -array
    defaults write com.apple.dock show-recents -bool false
    defaults write com.apple.dock static-only -bool true
    defaults write com.apple.dock launchanim -bool false

    msg_info "Restarting the Dock."
    killall -KILL Dock

    msg_info "Setting Terminal prefs..."
    defaults write com.apple.Terminal SecureKeyboardEntry -bool true

    confirm "Some options require reboot to take effect. Reboot now?" && sudo shutdown -r now
}

setup_firewall() {
    check_is_sudo

    msg_info "Blocking all incoming connections..."
    defaults write /Library/Preferences/com.apple.alf globalstate -int 2

    msg_info "Enabling stealth mode..."
    /usr/libexec/ApplicationFirewall/socketfilterfw --setstealthmode on
}

setup_dns() {
    check_is_not_sudo

    msg_info "Setting DNS to Cloudflare..."
    networksetup -setdnsservers Wi-Fi 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001

    msg_info "Flushing DNS cache..."
    sudo dscacheutil -flushcache
    sudo killall -HUP mDNSResponder
}

change_hostname() {
    check_is_sudo

    read -r -p "Enter a new name: " newname
    scutil --set ComputerName "${newname}"
    scutil --set LocalHostName "${newname}"
    scutil --set HostName "${newname}"
}

install_homebrew() {
    check_is_not_sudo

    if test ! "$(command -v brew >/dev/null 2>&1)"
    then
        msg_info "Downloading and installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    else
        msg_error "Homebrew is already installed, exiting."
    fi

    msg_info "Turning analytics off..."
    brew analytics off
}

install_formulae() {
    check_is_not_sudo

    msg_info "Initial update..."
    brew update

    msg_info "Initial ugrade..."
    brew upgrade

    local packages=(
        aria2
        exiftool
        fd
        ffmpeg
        gnupg
        httrack
        imagemagick
        jq
        mkvtoolnix
        nmap
        pandoc
        pinentry-mac
        shellcheck
        speedtest-cli
        streamlink
        tmux
        tor
        wget
        yt-dlp
    )

    for p in "${packages[@]}"; do
        confirm "Install ${p}?" && brew install "${p}"
    done

    confirm "Install emacs?" && {
        while true; do
            echo
            printf "Select which Emacs version you want: \n"
            printf "  [1] Mitsuharu's Emacs Mac port\n"
            printf "  [2] d12frosted's Emacs Plus\n"
            echo
            read -r choice

            case "$choice" in
                1)
                    msg_info "Tapping railwaycat/emacsmacport"
                    brew tap railwaycat/emacsmacport

                    msg_info "Building our Emacs with custom flags..."
                    brew install emacs-mac --with-emacs-big-sur-icon --with-native-compilation --with-mac-metal --with-librsvg

                    msg_info "Making GUI helper to Applications..."
                    cp -a "$(brew --prefix)"/opt/emacs-mac/Emacs.app /Applications

                    break
                    ;;
                2)
                    msg_info "Tapping d12frosted/emacs-plus"
                    brew tap d12frosted/emacs-plus

                    msg_info "Building our Emacs with custom flags..."
                    brew install emacs-plus --with-mailutils --with-dragon-icon

                    break
                    ;;
                *)
                    msg_error "Please choose either option 1 or 2."
                    ;;
            esac
        done
    }

    brew_clean
}

install_casks() {
    check_is_not_sudo

    local packages=(
        adobe-creative-cloud
        caffeine
        chatty
        electrum
        firefox
        keepassxc
        knockknock
        lulu
        mullvadvpn
        rectangle
        signal
        silentknight
        spotify
        synology-drive
        tor-browser
        veracrypt
    )

    msg_info "Installing cask packages..."
    for p in "${packages[@]}"; do
        confirm "Install ${p}?" && brew install --cask "${p}"
    done

    confirm "Install qbittorrent?" && {
        brew install --cask qbittorrent

        msg_info "Waiting a few secs for folders to be created..."
        spin & spinpid=$!
        sleep 10
        kill "${spinpid}"
        echo

        local plugin_folder="${HOME}/Library/Application Support/qBittorrent/nova3/engines"
        msg_info "Downloading search plugins..."

        URLs=(
            # official plugins
            https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/eztv.py
            https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/limetorrents.py
            https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/piratebay.py
            https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/solidtorrents.py
            https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/torlock.py
            https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/torrentproject.py
            https://raw.githubusercontent.com/qbittorrent/search-plugins/master/nova3/engines/torrentscsv.py

            # third party plugins
            https://raw.githubusercontent.com/BurningMop/qBittorrent-Search-Plugins/main/bitsearch.py
            https://raw.githubusercontent.com/BurningMop/qBittorrent-Search-Plugins/main/therarbg.py
            https://raw.githubusercontent.com/BurningMop/qBittorrent-Search-Plugins/main/torrentdownloads.py
            https://raw.githubusercontent.com/LightDestory/qBittorrent-Search-Plugins/master/src/engines/ettv.py
            https://raw.githubusercontent.com/LightDestory/qBittorrent-Search-Plugins/master/src/engines/glotorrents.py
            https://raw.githubusercontent.com/LightDestory/qBittorrent-Search-Plugins/master/src/engines/kickasstorrents.py
            https://raw.githubusercontent.com/LightDestory/qBittorrent-Search-Plugins/master/src/engines/snowfl.py
            https://raw.githubusercontent.com/Bioux1/qbtSearchPlugins/main/dodi_repacks.py
            https://raw.githubusercontent.com/Bioux1/qbtSearchPlugins/main/fitgirl_repacks.py
            https://raw.githubusercontent.com/MadeOfMagicAndWires/qBit-plugins/6074a7cccb90dfd5c81b7eaddd3138adec7f3377/engines/linuxtracker.py
            https://raw.githubusercontent.com/MadeOfMagicAndWires/qBit-plugins/master/engines/nyaasi.py
            https://scare.ca/dl/qBittorrent/torrentdownload.py
            https://scare.ca/dl/qBittorrent/magnetdl.py
            https://raw.githubusercontent.com/imDMG/qBt_SE/master/engines/rutor.py
            https://raw.githubusercontent.com/nbusseneau/qBittorrent-rutracker-plugin/master/rutracker.py
            https://gist.githubusercontent.com/scadams/56635407b8dfb8f5f7ede6873922ac8b/raw/f654c10468a0b9945bec9bf31e216993c9b7a961/one337x.py
            https://raw.githubusercontent.com/AlaaBrahim/qBitTorrent-animetosho-search-plugin/main/animetosho.py
            https://raw.githubusercontent.com/TuckerWarlock/qbittorrent-search-plugins/main/bt4gprx.com/bt4gprx.py
            https://raw.githubusercontent.com/MarcBresson/cpasbien/master/src/cpasbien.py
            https://raw.githubusercontent.com/nindogo/qbtSearchScripts/master/torrentgalaxy.py
            https://raw.githubusercontent.com/menegop/qbfrench/master/torrent9.py
            https://raw.githubusercontent.com/amongst-us/qbit-plugins/main/yts_mx/yts_mx.py
            https://raw.githubusercontent.com/444995/qbit-search-plugins/main/engines/zooqle.py
            https://raw.githubusercontent.com/CravateRouge/qBittorrentSearchPlugins/master/yggtorrent.py
        )

        # Loop over URLs and download each file
        for url in "${URLs[@]}"; do
            filename=$(basename "$url")
            curl -L#o "${plugin_folder}/${filename}" "${url}"
        done
    }

    confirm "Install mpv?" && {
        local mpv_config_path="${HOME}/.config/mpv"

        msg_info "Installing mpv..."
        brew install --cask mpv

        msg_info "Installing plugins..."

        (
            cd "${tmpdir}" || exit 1
            curl -L#o uosc.zip https://github.com/tomasklaen/uosc/releases/latest/download/uosc.zip
            unzip -n uosc.zip -d "${mpv_config_path}"
        )

        curl -L#o "${mpv_config_path}/scripts/thumbfast.lua" https://raw.githubusercontent.com/po5/thumbfast/master/thumbfast.lua
        curl -L#o "${mpv_config_path}/scripts/visualizer.lua" https://raw.githubusercontent.com/mfcc64/mpv-scripts/master/visualizer.lua
        curl -L#o "${mpv_config_path}/scripts/crop.lua" https://raw.githubusercontent.com/occivink/mpv-scripts/master/scripts/crop.lua
        curl -L#o "${mpv_config_path}/scripts/encode.lua" https://raw.githubusercontent.com/occivink/mpv-scripts/master/scripts/encode.lua
    }

    echo
    msg_info "Cleaning up install files..."
    brew cleanup
}

install_macports() {
    check_is_not_sudo

    command -v jq >/dev/null 2>&1 || { msg_error "You need jq to continue. Make sure it is installed and in your path."; exit 1; }

    get_macos_version() {
        sw_vers | awk '/ProductVersion/ {
        split($2, a, ".");
        if (a[1] == 10) {
           print a[1] "." a[2];
        } else {
          print a[1];
        }
        }'
    }

    local os_version
    os_version=$(get_macos_version)

    local os_marketing
    os_marketing=$(awk '/SOFTWARE LICENSE AGREEMENT FOR macOS/' '/System/Library/CoreServices/Setup Assistant.app/Contents/Resources/en.lproj/OSXSoftwareLicense.rtf' | awk -F 'macOS ' '{print $NF}' | awk '{print substr($0, 0, length($0)-1)}')

    local macports_latest
    macports_latest=$(curl -sSL "https://api.github.com/repos/macports/macports-base/releases/latest" | jq --raw-output .tag_name)
    macports_latest=${macports_latest#v}

    local repo="https://github.com/macports/macports-base/releases/download/"
    local release="v${macports_latest}/MacPorts-${macports_latest}-${os_version}-${os_marketing}.pkg"

    tmpdir_mp=$(mktemp -d)

    (
        msg_info "Creating temporary folder..."
        cd "${tmpdir_mp}" || exit 1

        msg_info "Downloading MacPorts..."
        curl -#OL "${repo}${release}"
        open ./"MacPorts-${macports_latest}-${os_version}-${os_marketing}.pkg"
    )

    confirm "Confirm to delete install file. Please wait for install to finish before deleting." && rm -rf "${tmpdir_mp}"
}

install_ports() {
    check_is_sudo

    local packages=(
        aria2
        exiftool
        fd
        ffmpeg
        gnupg2
        httrack
        imagemagick
        jq
        keepassxc
        mkvtoolnix
        mpv
        nmap
        pandoc
        pinentry-mac
        shellcheck
        silentknight
        speedtest-cli
        streamlink
        tmux
        tor
        wget
        yt-dlp
    )

    for p in "${packages[@]}"; do
        confirm "Install ${p}?" && sudo port install "${p}"
    done

    confirm "Install emacs?" && {
        while true; do
            echo
            printf "Select which Emacs version you want: \n"
            printf "  [1] Mitsuharu's Emacs Mac port\n"
            printf "  [2] Vanilla Emacs for macOS\n"
            echo
            read -r choice

            case "$choice" in
                1)
                    sudo port install emacs-mac-app +metal +nativecomp +rsvg +treesitter
                    break
                    ;;
                2)
                    sudo port install emacs-app +nativecomp +rsvg +treesitter
                    break
                    ;;
                *)
                    msg_error "Please choose either option 1 or 2."
                    ;;
            esac
        done
    }
}

set_git() {
    check_is_not_sudo

    (
        cd "${HOME}/dotfiles"
        if [ "$(git rev-parse --is-inside-work-tree)" ]; then
            git remote set-url origin git@github.com:grolongo/dotfiles.git
        else
            git init
            git remote add origin git@github.com:grolongo/dotfiles.git
            git fetch
            git reset origin/master
            git branch --set-upstream-to=origin/master
        fi
    )
}

usage() {
    echo
    printf "Usage:\n"
    printf "  prefsettings - setup finder, trackpad, keyboard and dock settings\n"
    printf "  firewall (s) - block incoming connection, stealth mode\n"
    printf "  dns          - set WiFi IPv4 & IPv6 DNS to Cloudflare\n"
    printf "  hostname (s) - change computer hostname\n"
    printf "  homebrew     - setup homebrew if not installed\n"
    printf "  formulae     - install base formulae\n"
    printf "  casks        - setup caskroom & install softwares\n"
    printf "  macports     - setup MacPorts\n"
    printf "  ports    (s) - install ports\n"
    printf "  git          - set correct SSH origin for this repository\n"
    echo
}

main() {
    local cmd="${1-}"

    # return error if nothing is specified
    if [ -z "$cmd" ]; then
        usage
        exit 1
    fi

    if [ "$cmd" = "prefsettings" ]; then
        setup_prefsettings
    elif [ "$cmd" = "firewall" ]; then
        setup_firewall
    elif [ "$cmd" = "dns" ]; then
        setup_dns
    elif [ "$cmd" = "hostname" ]; then
        change_hostname
    elif [ "$cmd" = "homebrew" ]; then
        install_homebrew
    elif [ "$cmd" = "formulae" ]; then
        install_formulae
    elif [ "$cmd" = "casks" ]; then
        install_casks
    elif [ "$cmd" = "macports" ]; then
        install_macports
    elif [ "$cmd" = "ports" ]; then
        install_ports
    elif [ "$cmd" = "git" ]; then
        set_git
    else
        usage
    fi
}

main "$@"
